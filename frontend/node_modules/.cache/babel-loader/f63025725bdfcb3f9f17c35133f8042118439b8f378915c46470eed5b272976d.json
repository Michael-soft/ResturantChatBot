{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tosin\\\\OneDrive\\\\Desktop\\\\Third Semster Assesment\\\\Restaurant ChatBot\\\\frontend\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n  const [currentOrderAmount, setCurrentOrderAmount] = useState(0);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n\n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n\n  // Check for payment status in URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const paymentStatus = params.get('payment');\n    const orderId = params.get('orderId');\n    if (paymentStatus && orderId) {\n      let message = '';\n      switch (paymentStatus) {\n        case 'success':\n          message = 'Payment successful! Your order has been confirmed. Thank you for your purchase!';\n          break;\n        case 'cancelled':\n          message = 'Payment was cancelled. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'failed':\n          message = 'Payment failed. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'error':\n          message = 'There was an error processing your payment. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        default:\n          return;\n      }\n      setMessages(prev => [...prev, {\n        text: message,\n        sender: 'bot'\n      }]);\n    }\n  }, [location]);\n  const fetchInitialOptions = async id => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      setMessages([{\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([{\n        text: 'Welcome to Our Restaurant Chatbot! Please select an option:',\n        sender: 'bot'\n      }, {\n        text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)',\n        sender: 'bot'\n      }, {\n        text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePayment = (orderId, amount) => {\n    // Redirect to payment page\n    navigate(`/payment?orderId=${orderId}&amount=${amount}&deviceId=${deviceId}`);\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (inputText.trim() === '') {\n      return;\n    }\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: inputText,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      // Send message to backend\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      // Add bot response\n      setMessages([...newMessages, {\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n\n      // Check if this is a payment selection (after checkout)\n      if (inputText.trim() === '1' && response.data.response.includes('Pay with Paystack')) {\n        // Extract order ID and amount from the response\n        const orderIdMatch = response.data.response.match(/Order #(\\d+)/);\n        const amountMatch = response.data.response.match(/Total: \\$(\\d+(\\.\\d{2})?)/);\n        if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n          const orderId = orderIdMatch[1];\n          const amount = parseFloat(amountMatch[1]);\n          setCurrentOrderId(orderId);\n          setCurrentOrderAmount(amount);\n          handlePayment(orderId, amount);\n        } else {\n          setMessages(prev => [...prev, {\n            text: 'Sorry, there was an error processing your payment. Please try again.',\n            sender: 'bot'\n          }]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n\n      // Simulate a response for demo purposes\n      let simulatedResponse = '';\n      switch (inputText.trim()) {\n        case '1':\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\n          break;\n        case '99':\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\n          break;\n        default:\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n      }\n\n      // Add simulated response\n      setMessages([...newMessages, {\n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    style: {\n      maxWidth: '600px',\n      margin: '0 auto',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      overflow: 'hidden'\n    },\n    children: [connectionError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#fff3cd',\n        color: '#856404',\n        padding: '10px',\n        textAlign: 'center',\n        borderBottom: '1px solid #ddd'\n      },\n      children: \"\\u26A0\\uFE0F Backend connection failed. Running in demo mode with simulated responses.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      style: {\n        height: '400px',\n        overflowY: 'auto',\n        padding: '20px',\n        backgroundColor: '#f9f9f9'\n      },\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px',\n          textAlign: message.sender === 'user' ? 'right' : 'left'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block',\n            padding: '10px 15px',\n            borderRadius: '18px',\n            backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n            color: message.sender === 'user' ? 'white' : 'black',\n            maxWidth: '70%',\n            whiteSpace: 'pre-line'\n          },\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'left',\n          marginBottom: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block',\n            padding: '10px 15px',\n            borderRadius: '18px',\n            backgroundColor: '#e9ecef',\n            color: 'black',\n            maxWidth: '70%'\n          },\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      style: {\n        display: 'flex',\n        padding: '10px',\n        borderTop: '1px solid #ddd'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"Type your message...\",\n        style: {\n          flex: 1,\n          padding: '10px',\n          borderRadius: '4px',\n          border: '1px solid #ddd',\n          marginRight: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"UYrI2FyC5VJTXT8TN4zR5hMLwzI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","deviceId","setDeviceId","connectionError","setConnectionError","currentOrderId","setCurrentOrderId","currentOrderAmount","setCurrentOrderAmount","navigate","location","newDeviceId","Math","random","toString","substring","fetchInitialOptions","params","URLSearchParams","search","paymentStatus","get","orderId","message","prev","text","sender","id","response","post","data","error","console","handlePayment","amount","handleSendMessage","e","preventDefault","trim","newMessages","includes","orderIdMatch","match","amountMatch","parseFloat","simulatedResponse","className","style","maxWidth","margin","border","borderRadius","overflow","children","backgroundColor","color","padding","textAlign","borderBottom","fileName","_jsxFileName","lineNumber","columnNumber","height","overflowY","map","index","marginBottom","display","whiteSpace","onSubmit","borderTop","type","value","onChange","target","placeholder","flex","marginRight","cursor","_c","$RefreshReg$"],"sources":["C:/Users/tosin/OneDrive/Desktop/Third Semster Assesment/Restaurant ChatBot/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n  const [currentOrderAmount, setCurrentOrderAmount] = useState(0);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n    \n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n\n  // Check for payment status in URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const paymentStatus = params.get('payment');\n    const orderId = params.get('orderId');\n\n    if (paymentStatus && orderId) {\n      let message = '';\n      \n      switch (paymentStatus) {\n        case 'success':\n          message = 'Payment successful! Your order has been confirmed. Thank you for your purchase!';\n          break;\n        case 'cancelled':\n          message = 'Payment was cancelled. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'failed':\n          message = 'Payment failed. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'error':\n          message = 'There was an error processing your payment. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        default:\n          return;\n      }\n      \n      setMessages(prev => [...prev, { text: message, sender: 'bot' }]);\n    }\n  }, [location]);\n\n  const fetchInitialOptions = async (id) => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      \n      setMessages([\n        { text: response.data.response, sender: 'bot' }\n      ]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([\n        { text: 'Welcome to Our Restaurant Chatbot! Please select an option:', sender: 'bot' },\n        { text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)', sender: 'bot' },\n        { text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.', sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePayment = (orderId, amount) => {\n    // Redirect to payment page\n    navigate(`/payment?orderId=${orderId}&amount=${amount}&deviceId=${deviceId}`);\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (inputText.trim() === '') {\n      return;\n    }\n\n    // Add user message\n    const newMessages = [...messages, { text: inputText, sender: 'user' }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n    setConnectionError(false);\n\n    try {\n      // Send message to backend\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      // Add bot response\n      setMessages([...newMessages, { text: response.data.response, sender: 'bot' }]);\n\n      // Check if this is a payment selection (after checkout)\n      if (inputText.trim() === '1' && response.data.response.includes('Pay with Paystack')) {\n        // Extract order ID and amount from the response\n        const orderIdMatch = response.data.response.match(/Order #(\\d+)/);\n        const amountMatch = response.data.response.match(/Total: \\$(\\d+(\\.\\d{2})?)/);\n        \n        if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n          const orderId = orderIdMatch[1];\n          const amount = parseFloat(amountMatch[1]);\n          setCurrentOrderId(orderId);\n          setCurrentOrderAmount(amount);\n          handlePayment(orderId, amount);\n        } else {\n          setMessages(prev => [...prev, { \n            text: 'Sorry, there was an error processing your payment. Please try again.', \n            sender: 'bot' \n          }]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n      \n      // Simulate a response for demo purposes\n      let simulatedResponse = '';\n      \n      switch(inputText.trim()) {\n        case '1':\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\n          break;\n        case '99':\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\n          break;\n        default:\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n      }\n      \n      // Add simulated response\n      setMessages([...newMessages, { \n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.', \n        sender: 'bot' \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\" style={{ \n      maxWidth: '600px', \n      margin: '0 auto', \n      border: '1px solid #ddd', \n      borderRadius: '8px',\n      overflow: 'hidden'\n    }}>\n      {connectionError && (\n        <div style={{ \n          backgroundColor: '#fff3cd', \n          color: '#856404', \n          padding: '10px', \n          textAlign: 'center',\n          borderBottom: '1px solid #ddd'\n        }}>\n          ⚠️ Backend connection failed. Running in demo mode with simulated responses.\n        </div>\n      )}\n      <div className=\"chat-messages\" style={{ \n        height: '400px', \n        overflowY: 'auto', \n        padding: '20px',\n        backgroundColor: '#f9f9f9'\n      }}>\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            style={{ \n              marginBottom: '10px',\n              textAlign: message.sender === 'user' ? 'right' : 'left'\n            }}\n          >\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n              color: message.sender === 'user' ? 'white' : 'black',\n              maxWidth: '70%',\n              whiteSpace: 'pre-line'\n            }}>\n              {message.text}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div style={{ textAlign: 'left', marginBottom: '10px' }}>\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: '#e9ecef',\n              color: 'black',\n              maxWidth: '70%'\n            }}>\n              Typing...\n            </div>\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSendMessage} style={{ \n        display: 'flex', \n        padding: '10px',\n        borderTop: '1px solid #ddd'\n      }}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          placeholder=\"Type your message...\"\n          style={{ \n            flex: 1, \n            padding: '10px', \n            borderRadius: '4px',\n            border: '1px solid #ddd',\n            marginRight: '10px'\n          }}\n        />\n        <button \n          type=\"submit\"\n          style={{ \n            padding: '10px 20px', \n            backgroundColor: '#007bff', \n            color: 'white', \n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}