{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import{useNavigate,useLocation}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatBot(){var _messages$filter$pop;const[messages,setMessages]=useState([]);const[inputText,setInputText]=useState('');const[isLoading,setIsLoading]=useState(false);const[deviceId,setDeviceId]=useState('');const[connectionError,setConnectionError]=useState(false);const[currentOrderId,setCurrentOrderId]=useState(null);const[currentOrderAmount,setCurrentOrderAmount]=useState(0);const navigate=useNavigate();const location=useLocation();// Generate a random device ID when component mounts\nuseEffect(()=>{const newDeviceId='device_'+Math.random().toString(36).substring(2,15);setDeviceId(newDeviceId);// Get initial options from the backend\nfetchInitialOptions(newDeviceId);},[]);// Check for payment status in URL parameters\nuseEffect(()=>{const params=new URLSearchParams(location.search);const paymentStatus=params.get('payment');const orderId=params.get('orderId');const reference=params.get('reference');if(paymentStatus&&orderId){let message='';switch(paymentStatus){case'success':message='Payment successful! Your order has been confirmed. Thank you for your purchase!';break;case'cancelled':message='Payment was cancelled. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment';break;case'failed':message='Payment failed. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';break;case'error':message='There was an error processing your payment. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';break;default:return;}setMessages(prev=>[...prev,{text:message,sender:'bot'}]);}else if(reference){// This is a Paystack callback\n// Verify the payment with the backend\nconst verifyPayment=async()=>{try{const response=await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);if(response.data.status==='success'){setMessages(prev=>[...prev,{text:'Payment successful! Your order has been confirmed. Thank you for your purchase!',sender:'bot'}]);}else{setMessages(prev=>[...prev,{text:'Payment verification failed. Please contact support.',sender:'bot'}]);}}catch(error){console.error('Error verifying payment:',error);setMessages(prev=>[...prev,{text:'There was an error verifying your payment. Please contact support.',sender:'bot'}]);}};verifyPayment();}},[location]);const fetchInitialOptions=async id=>{setIsLoading(true);setConnectionError(false);try{const response=await axios.post('http://localhost:3001/api/chat',{deviceId:id,message:'start'});setMessages([{text:response.data.response,sender:'bot'}]);}catch(error){console.error('Error fetching options:',error);setConnectionError(true);setMessages([{text:'Welcome to Our Restaurant Chatbot! Please select an option:',sender:'bot'},{text:'1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)',sender:'bot'},{text:'⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.',sender:'bot'}]);}finally{setIsLoading(false);}};const handlePayment=(orderId,amount)=>{// Redirect to payment page\nnavigate(`/payment?orderId=${orderId}&amount=${amount}`);};const handleSendMessage=async e=>{e.preventDefault();if(!inputText.trim()){return;}const newMessages=[...messages,{text:inputText,sender:'user'}];setMessages(newMessages);setInputText('');setIsLoading(true);try{// Check if this is a payment selection\nconst lastBotMessage=messages.filter(m=>m.sender==='bot').pop();const isPaymentPrompt=lastBotMessage&&(lastBotMessage.text.includes('Would you like to pay now?')||lastBotMessage.text.includes('Pay with Paystack'));// Check if this is a scheduling prompt\nconst isSchedulingPrompt=lastBotMessage&&lastBotMessage.text.includes('Please enter the date and time');if(isSchedulingPrompt){// Validate date format (YYYY-MM-DD HH:mm)\nconst dateRegex=/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/;if(!dateRegex.test(inputText.trim())){setMessages([...newMessages,{text:'Invalid date format. Please use YYYY-MM-DD HH:mm format (e.g., 2024-03-25 18:00)',sender:'bot'}]);setIsLoading(false);return;}// Send scheduling request to backend\nconst response=await axios.post('http://localhost:3001/api/chat',{deviceId:deviceId,message:`schedule ${inputText.trim()}`});setMessages([...newMessages,{text:response.data.response,sender:'bot'}]);setIsLoading(false);return;}if(isPaymentPrompt&&(inputText.trim()==='1'||inputText.trim().toLowerCase()==='pay')){// Extract order ID and amount from the last bot message\nconst orderIdMatch=lastBotMessage.text.match(/Order #(\\d+)/);const amountMatch=lastBotMessage.text.match(/Total: ₦(\\d+(\\.\\d{2})?)/);if(orderIdMatch&&orderIdMatch[1]&&amountMatch&&amountMatch[1]){const orderId=orderIdMatch[1];const amount=parseFloat(amountMatch[1]);// Add a message about initiating payment\nsetMessages([...newMessages,{text:`Initiating payment for Order #${orderId} - ₦${amount.toFixed(2)}...`,sender:'bot'}]);// Redirect to payment page\nnavigate(`/payment?orderId=${orderId}&amount=${amount}`);return;}else{setMessages([...newMessages,{text:'Sorry, there was an error processing your payment. Please try again.',sender:'bot'}]);return;}}// If not a payment selection or scheduling, proceed with normal chat flow\nconst response=await axios.post('http://localhost:3001/api/chat',{deviceId:deviceId,message:inputText});setMessages([...newMessages,{text:response.data.response,sender:'bot'}]);}catch(error){console.error('Error sending message:',error);setConnectionError(true);// Simulated response for demo mode\nlet simulatedResponse='';switch(inputText.trim()){case'1':// Check if we're in payment mode\nconst lastBotMessage=messages.filter(m=>m.sender==='bot').pop();const isPaymentPrompt=lastBotMessage&&(lastBotMessage.text.includes('Would you like to pay now?')||lastBotMessage.text.includes('Pay with Paystack'));if(isPaymentPrompt){simulatedResponse='Order #12345 placed successfully! Total: ₦2500.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';}else{simulatedResponse='Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - ₦1000\\n2. Burger - ₦800\\n3. Salad - ₦600\\n4. Pasta - ₦900\\n\\nPlease enter the number of the item you want to order.';}break;case'99':simulatedResponse='Order #12345 placed successfully! Total: ₦2500.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment\\n\\nOr would you like to place a new order?\\n\\n2 - Place a new order';break;case'98':simulatedResponse='Your order history:\\n\\nNo previous orders found.';break;case'97':simulatedResponse='Your current order:\\n\\nNo active order.';break;case'0':simulatedResponse='Your order has been cancelled.';break;case'96':simulatedResponse='Please enter the date and time you would like to schedule your order for (e.g., \"2024-03-25 18:00\").';break;default:// Check if this is a scheduling attempt\nconst dateRegex=/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/;if(dateRegex.test(inputText.trim())){simulatedResponse=`Order scheduled for ${inputText.trim()}. You will receive a confirmation when the order is ready.`;}else{simulatedResponse='I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';}}// Add simulated response\nsetMessages([...newMessages,{text:simulatedResponse+'\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.',sender:'bot'}]);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",style:{maxWidth:'600px',margin:'0 auto',border:'1px solid #ddd',borderRadius:'8px',overflow:'hidden'},children:[connectionError&&/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:'#fff3cd',color:'#856404',padding:'10px',textAlign:'center',borderBottom:'1px solid #ddd'},children:\"\\u26A0\\uFE0F Backend connection failed. Running in demo mode with simulated responses.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",style:{height:'400px',overflowY:'auto',padding:'20px',backgroundColor:'#f9f9f9'},children:[messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:'10px',textAlign:message.sender==='user'?'right':'left'},children:/*#__PURE__*/_jsx(\"div\",{style:{display:'inline-block',padding:'10px 15px',borderRadius:'18px',backgroundColor:message.sender==='user'?'#007bff':'#e9ecef',color:message.sender==='user'?'white':'black',maxWidth:'70%',whiteSpace:'pre-line'},children:message.text})},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'left',marginBottom:'10px'},children:/*#__PURE__*/_jsx(\"div\",{style:{display:'inline-block',padding:'10px 15px',borderRadius:'18px',backgroundColor:'#e9ecef',color:'black',maxWidth:'70%'},children:\"Typing...\"})})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSendMessage,style:{display:'flex',padding:'10px',borderTop:'1px solid #ddd'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputText,onChange:e=>setInputText(e.target.value),placeholder:\"Type your message...\",style:{flex:1,padding:'10px',borderRadius:'4px',border:'1px solid #ddd',marginRight:'10px'}}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",style:{padding:'10px 20px',backgroundColor:'#007bff',color:'white',border:'none',borderRadius:'4px',cursor:'pointer'},children:\"Send\"})]}),messages.length>0&&((_messages$filter$pop=messages.filter(m=>m.sender==='bot').pop())===null||_messages$filter$pop===void 0?void 0:_messages$filter$pop.text.includes('Would you like to pay now?'))&&/*#__PURE__*/_jsx(\"div\",{style:{padding:'10px',borderTop:'1px solid #ddd',textAlign:'center'},children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>{const lastBotMessage=messages.filter(m=>m.sender==='bot').pop();console.log('Last bot message:',lastBotMessage.text);// Extract order ID and amount using the current format\nconst orderIdMatch=lastBotMessage.text.match(/Order #(\\d+)/);const amountMatch=lastBotMessage.text.match(/Total: ₦(\\d+(\\.\\d{2})?)/);console.log('Order ID match:',orderIdMatch);console.log('Amount match:',amountMatch);if(orderIdMatch&&orderIdMatch[1]&&amountMatch&&amountMatch[1]){const orderId=orderIdMatch[1];const amount=parseFloat(amountMatch[1]);console.log('Extracted order ID:',orderId);console.log('Extracted amount:',amount);handlePayment(orderId,amount);// Add user message and bot response\nsetMessages(prev=>[...prev,{text:'1',sender:'user'},// Send '1' to select Paystack payment\n{text:`Initiating payment for Order #${orderId} - ₦${amount.toFixed(2)}...`,sender:'bot'}]);}else{console.error('Failed to extract order details:',{orderIdMatch,amountMatch,message:lastBotMessage.text});setMessages(prev=>[...prev,{text:'Sorry, there was an error processing your payment. Please try again.',sender:'bot'}]);}},style:{padding:'10px 20px',backgroundColor:'#28a745',color:'white',border:'none',borderRadius:'4px',cursor:'pointer',fontSize:'16px',fontWeight:'bold'},children:\"Pay with Paystack\"})})]});}export default ChatBot;","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useLocation","jsx","_jsx","jsxs","_jsxs","ChatBot","_messages$filter$pop","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","deviceId","setDeviceId","connectionError","setConnectionError","currentOrderId","setCurrentOrderId","currentOrderAmount","setCurrentOrderAmount","navigate","location","newDeviceId","Math","random","toString","substring","fetchInitialOptions","params","URLSearchParams","search","paymentStatus","get","orderId","reference","message","prev","text","sender","verifyPayment","response","data","status","error","console","id","post","handlePayment","amount","handleSendMessage","e","preventDefault","trim","newMessages","lastBotMessage","filter","m","pop","isPaymentPrompt","includes","isSchedulingPrompt","dateRegex","test","toLowerCase","orderIdMatch","match","amountMatch","parseFloat","toFixed","simulatedResponse","className","style","maxWidth","margin","border","borderRadius","overflow","children","backgroundColor","color","padding","textAlign","borderBottom","height","overflowY","map","index","marginBottom","display","whiteSpace","onSubmit","borderTop","type","value","onChange","target","placeholder","flex","marginRight","cursor","length","onClick","log","fontSize","fontWeight"],"sources":["C:/Users/tosin/OneDrive/Desktop/Third Semster Assesment/Restaurant ChatBot/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n  const [currentOrderAmount, setCurrentOrderAmount] = useState(0);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n    \n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n\n  // Check for payment status in URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const paymentStatus = params.get('payment');\n    const orderId = params.get('orderId');\n    const reference = params.get('reference');\n\n    if (paymentStatus && orderId) {\n      let message = '';\n      \n      switch (paymentStatus) {\n        case 'success':\n          message = 'Payment successful! Your order has been confirmed. Thank you for your purchase!';\n          break;\n        case 'cancelled':\n          message = 'Payment was cancelled. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'failed':\n          message = 'Payment failed. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        case 'error':\n          message = 'There was an error processing your payment. Please try again or contact support.\\n\\n1 - Try payment again\\n0 - Cancel payment';\n          break;\n        default:\n          return;\n      }\n      \n      setMessages(prev => [...prev, { text: message, sender: 'bot' }]);\n    } else if (reference) {\n      // This is a Paystack callback\n      // Verify the payment with the backend\n      const verifyPayment = async () => {\n        try {\n          const response = await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);\n          \n          if (response.data.status === 'success') {\n            setMessages(prev => [...prev, { \n              text: 'Payment successful! Your order has been confirmed. Thank you for your purchase!', \n              sender: 'bot' \n            }]);\n          } else {\n            setMessages(prev => [...prev, { \n              text: 'Payment verification failed. Please contact support.', \n              sender: 'bot' \n            }]);\n          }\n        } catch (error) {\n          console.error('Error verifying payment:', error);\n          setMessages(prev => [...prev, { \n            text: 'There was an error verifying your payment. Please contact support.', \n            sender: 'bot' \n          }]);\n        }\n      };\n      \n      verifyPayment();\n    }\n  }, [location]);\n\n  const fetchInitialOptions = async (id) => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      \n      setMessages([\n        { text: response.data.response, sender: 'bot' }\n      ]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([\n        { text: 'Welcome to Our Restaurant Chatbot! Please select an option:', sender: 'bot' },\n        { text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)', sender: 'bot' },\n        { text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.', sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePayment = (orderId, amount) => {\n    // Redirect to payment page\n    navigate(`/payment?orderId=${orderId}&amount=${amount}`);\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (!inputText.trim()) {\n      return;\n    }\n\n    const newMessages = [...messages, { text: inputText, sender: 'user' }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n\n    try {\n      // Check if this is a payment selection\n      const lastBotMessage = messages.filter(m => m.sender === 'bot').pop();\n      const isPaymentPrompt = lastBotMessage && \n        (lastBotMessage.text.includes('Would you like to pay now?') || \n         lastBotMessage.text.includes('Pay with Paystack'));\n\n      // Check if this is a scheduling prompt\n      const isSchedulingPrompt = lastBotMessage && \n        lastBotMessage.text.includes('Please enter the date and time');\n\n      if (isSchedulingPrompt) {\n        // Validate date format (YYYY-MM-DD HH:mm)\n        const dateRegex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/;\n        if (!dateRegex.test(inputText.trim())) {\n          setMessages([...newMessages, { \n            text: 'Invalid date format. Please use YYYY-MM-DD HH:mm format (e.g., 2024-03-25 18:00)', \n            sender: 'bot' \n          }]);\n          setIsLoading(false);\n          return;\n        }\n\n        // Send scheduling request to backend\n        const response = await axios.post('http://localhost:3001/api/chat', {\n          deviceId: deviceId,\n          message: `schedule ${inputText.trim()}`\n        });\n\n        setMessages([...newMessages, { text: response.data.response, sender: 'bot' }]);\n        setIsLoading(false);\n        return;\n      }\n\n      if (isPaymentPrompt && (inputText.trim() === '1' || inputText.trim().toLowerCase() === 'pay')) {\n        // Extract order ID and amount from the last bot message\n        const orderIdMatch = lastBotMessage.text.match(/Order #(\\d+)/);\n        const amountMatch = lastBotMessage.text.match(/Total: ₦(\\d+(\\.\\d{2})?)/);\n        \n        if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n          const orderId = orderIdMatch[1];\n          const amount = parseFloat(amountMatch[1]);\n          \n          // Add a message about initiating payment\n          setMessages([...newMessages, { \n            text: `Initiating payment for Order #${orderId} - ₦${amount.toFixed(2)}...`, \n            sender: 'bot' \n          }]);\n          \n          // Redirect to payment page\n          navigate(`/payment?orderId=${orderId}&amount=${amount}`);\n          return;\n        } else {\n          setMessages([...newMessages, { \n            text: 'Sorry, there was an error processing your payment. Please try again.', \n            sender: 'bot' \n          }]);\n          return;\n        }\n      }\n\n      // If not a payment selection or scheduling, proceed with normal chat flow\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      setMessages([...newMessages, { text: response.data.response, sender: 'bot' }]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n      \n      // Simulated response for demo mode\n      let simulatedResponse = '';\n      \n      switch(inputText.trim()) {\n        case '1':\n          // Check if we're in payment mode\n          const lastBotMessage = messages.filter(m => m.sender === 'bot').pop();\n          const isPaymentPrompt = lastBotMessage && \n            (lastBotMessage.text.includes('Would you like to pay now?') || \n             lastBotMessage.text.includes('Pay with Paystack'));\n          \n          if (isPaymentPrompt) {\n            simulatedResponse = 'Order #12345 placed successfully! Total: ₦2500.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';\n          } else {\n            simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - ₦1000\\n2. Burger - ₦800\\n3. Salad - ₦600\\n4. Pasta - ₦900\\n\\nPlease enter the number of the item you want to order.';\n          }\n          break;\n        case '99':\n          simulatedResponse = 'Order #12345 placed successfully! Total: ₦2500.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment\\n\\nOr would you like to place a new order?\\n\\n2 - Place a new order';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2024-03-25 18:00\").';\n          break;\n        default:\n          // Check if this is a scheduling attempt\n          const dateRegex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/;\n          if (dateRegex.test(inputText.trim())) {\n            simulatedResponse = `Order scheduled for ${inputText.trim()}. You will receive a confirmation when the order is ready.`;\n          } else {\n            simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n          }\n      }\n      \n      // Add simulated response\n      setMessages([...newMessages, { \n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.', \n        sender: 'bot' \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\" style={{ \n      maxWidth: '600px', \n      margin: '0 auto', \n      border: '1px solid #ddd', \n      borderRadius: '8px',\n      overflow: 'hidden'\n    }}>\n      {connectionError && (\n        <div style={{ \n          backgroundColor: '#fff3cd', \n          color: '#856404', \n          padding: '10px', \n          textAlign: 'center',\n          borderBottom: '1px solid #ddd'\n        }}>\n          ⚠️ Backend connection failed. Running in demo mode with simulated responses.\n        </div>\n      )}\n      <div className=\"chat-messages\" style={{ \n        height: '400px', \n        overflowY: 'auto', \n        padding: '20px',\n        backgroundColor: '#f9f9f9'\n      }}>\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            style={{ \n              marginBottom: '10px',\n              textAlign: message.sender === 'user' ? 'right' : 'left'\n            }}\n          >\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n              color: message.sender === 'user' ? 'white' : 'black',\n              maxWidth: '70%',\n              whiteSpace: 'pre-line'\n            }}>\n              {message.text}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div style={{ textAlign: 'left', marginBottom: '10px' }}>\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: '#e9ecef',\n              color: 'black',\n              maxWidth: '70%'\n            }}>\n              Typing...\n            </div>\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSendMessage} style={{ \n        display: 'flex', \n        padding: '10px',\n        borderTop: '1px solid #ddd'\n      }}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          placeholder=\"Type your message...\"\n          style={{ \n            flex: 1, \n            padding: '10px', \n            borderRadius: '4px',\n            border: '1px solid #ddd',\n            marginRight: '10px'\n          }}\n        />\n        <button \n          type=\"submit\"\n          style={{ \n            padding: '10px 20px', \n            backgroundColor: '#007bff', \n            color: 'white', \n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Send\n        </button>\n      </form>\n      \n      {/* Payment Button - Only show when there's a payment prompt */}\n      {messages.length > 0 && \n       messages.filter(m => m.sender === 'bot').pop()?.text.includes('Would you like to pay now?') && (\n        <div style={{\n          padding: '10px',\n          borderTop: '1px solid #ddd',\n          textAlign: 'center'\n        }}>\n          <button\n            onClick={() => {\n              const lastBotMessage = messages.filter(m => m.sender === 'bot').pop();\n              console.log('Last bot message:', lastBotMessage.text);\n              \n              // Extract order ID and amount using the current format\n              const orderIdMatch = lastBotMessage.text.match(/Order #(\\d+)/);\n              const amountMatch = lastBotMessage.text.match(/Total: ₦(\\d+(\\.\\d{2})?)/);\n              \n              console.log('Order ID match:', orderIdMatch);\n              console.log('Amount match:', amountMatch);\n              \n              if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n                const orderId = orderIdMatch[1];\n                const amount = parseFloat(amountMatch[1]);\n                console.log('Extracted order ID:', orderId);\n                console.log('Extracted amount:', amount);\n                handlePayment(orderId, amount);\n                \n                // Add user message and bot response\n                setMessages(prev => [\n                  ...prev, \n                  { text: '1', sender: 'user' }, // Send '1' to select Paystack payment\n                  { text: `Initiating payment for Order #${orderId} - ₦${amount.toFixed(2)}...`, sender: 'bot' }\n                ]);\n              } else {\n                console.error('Failed to extract order details:', {\n                  orderIdMatch,\n                  amountMatch,\n                  message: lastBotMessage.text\n                });\n                setMessages(prev => [...prev, { \n                  text: 'Sorry, there was an error processing your payment. Please try again.', \n                  sender: 'bot' \n                }]);\n              }\n            }}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: '#28a745',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '16px',\n              fontWeight: 'bold'\n            }}\n          >\n            Pay with Paystack\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}