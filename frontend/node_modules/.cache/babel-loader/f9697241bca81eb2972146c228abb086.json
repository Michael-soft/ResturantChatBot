{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tosin\\\\OneDrive\\\\Desktop\\\\Third Semster Assesment\\\\Restaurant ChatBot\\\\frontend\\\\src\\\\components\\\\ChatBot.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n\n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n  const fetchInitialOptions = async id => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      setMessages([{\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([{\n        text: 'Welcome to Our Restaurant Chatbot! Please select an option:',\n        sender: 'bot'\n      }, {\n        text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)',\n        sender: 'bot'\n      }, {\n        text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePayment = async orderId => {\n    try {\n      // Initialize payment\n      const response = await axios.post('http://localhost:3001/api/payment/initialize', {\n        orderId\n      }, {\n        headers: {\n          deviceId\n        }\n      });\n\n      // Redirect to payment page\n      window.location.href = response.data.authorization_url;\n    } catch (error) {\n      console.error('Error initializing payment:', error);\n      setMessages(prev => [...prev, {\n        text: 'Sorry, there was an error processing your payment. Please try again later.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (inputText.trim() === '') {\n      return;\n    }\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: inputText,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      // Send message to backend\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      // Add bot response\n      setMessages([...newMessages, {\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n\n      // If this is a checkout response and contains an order ID, initiate payment\n      if (inputText.trim() === '99' && response.data.orderId) {\n        setCurrentOrderId(response.data.orderId);\n        await handlePayment(response.data.orderId);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n\n      // Simulate a response for demo purposes\n      let simulatedResponse = '';\n      switch (inputText.trim()) {\n        case '1':\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\n          break;\n        case '99':\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nThank you for your order!';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\n          break;\n        default:\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n      }\n\n      // Add simulated response\n      setMessages([...newMessages, {\n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check for payment verification on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const reference = urlParams.get('reference');\n    const trxref = urlParams.get('trxref');\n    if (reference || trxref) {\n      verifyPayment(reference || trxref);\n    }\n  }, []);\n  const verifyPayment = async reference => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);\n      if (response.data.status === 'success') {\n        setMessages(prev => [...prev, {\n          text: 'Payment successful! Your order has been confirmed. Thank you for your purchase!',\n          sender: 'bot'\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          text: 'Payment verification failed. Please contact support if you believe this is an error.',\n          sender: 'bot'\n        }]);\n      }\n    } catch (error) {\n      console.error('Error verifying payment:', error);\n      setMessages(prev => [...prev, {\n        text: 'Error verifying payment. Please contact support if you believe this is an error.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-container\",\n    style: {\n      maxWidth: '600px',\n      margin: '0 auto',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      overflow: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, connectionError && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: '#fff3cd',\n      color: '#856404',\n      padding: '10px',\n      textAlign: 'center',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, \"\\u26A0\\uFE0F Backend connection failed. Running in demo mode with simulated responses.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    style: {\n      height: '400px',\n      overflowY: 'auto',\n      padding: '20px',\n      backgroundColor: '#f9f9f9'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    style: {\n      marginBottom: '10px',\n      textAlign: message.sender === 'user' ? 'right' : 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      padding: '10px 15px',\n      borderRadius: '18px',\n      backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n      color: message.sender === 'user' ? 'white' : 'black',\n      maxWidth: '70%',\n      whiteSpace: 'pre-line'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, message.text))), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'left',\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      padding: '10px 15px',\n      borderRadius: '18px',\n      backgroundColor: '#e9ecef',\n      color: 'black',\n      maxWidth: '70%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"Typing...\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSendMessage,\n    style: {\n      display: 'flex',\n      padding: '10px',\n      borderTop: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputText,\n    onChange: e => setInputText(e.target.value),\n    placeholder: \"Type your message...\",\n    style: {\n      flex: 1,\n      padding: '10px',\n      borderRadius: '4px',\n      border: '1px solid #ddd',\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    style: {\n      padding: '10px 20px',\n      backgroundColor: '#007bff',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n}\nexport default ChatBot;","map":{"version":3,"names":["React","useState","useEffect","axios","ChatBot","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","deviceId","setDeviceId","connectionError","setConnectionError","currentOrderId","setCurrentOrderId","newDeviceId","Math","random","toString","substring","fetchInitialOptions","id","response","post","message","text","data","sender","error","console","handlePayment","orderId","headers","window","location","href","authorization_url","prev","handleSendMessage","e","preventDefault","trim","newMessages","simulatedResponse","urlParams","URLSearchParams","search","reference","get","trxref","verifyPayment","status","createElement","className","style","maxWidth","margin","border","borderRadius","overflow","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","color","padding","textAlign","borderBottom","height","overflowY","map","index","key","marginBottom","display","whiteSpace","onSubmit","borderTop","type","value","onChange","target","placeholder","flex","marginRight","cursor"],"sources":["C:/Users/tosin/OneDrive/Desktop/Third Semster Assesment/Restaurant ChatBot/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ChatBot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [deviceId, setDeviceId] = useState('');\r\n  const [connectionError, setConnectionError] = useState(false);\r\n  const [currentOrderId, setCurrentOrderId] = useState(null);\r\n\r\n  // Generate a random device ID when component mounts\r\n  useEffect(() => {\r\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\r\n    setDeviceId(newDeviceId);\r\n    \r\n    // Get initial options from the backend\r\n    fetchInitialOptions(newDeviceId);\r\n  }, []);\r\n\r\n  const fetchInitialOptions = async (id) => {\r\n    setIsLoading(true);\r\n    setConnectionError(false);\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/chat', {\r\n        deviceId: id,\r\n        message: 'start'\r\n      });\r\n      \r\n      setMessages([\r\n        { text: response.data.response, sender: 'bot' }\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error fetching options:', error);\r\n      setConnectionError(true);\r\n      setMessages([\r\n        { text: 'Welcome to Our Restaurant Chatbot! Please select an option:', sender: 'bot' },\r\n        { text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)', sender: 'bot' },\r\n        { text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.', sender: 'bot' }\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePayment = async (orderId) => {\r\n    try {\r\n      // Initialize payment\r\n      const response = await axios.post('http://localhost:3001/api/payment/initialize', \r\n        { orderId },\r\n        { headers: { deviceId } }\r\n      );\r\n\r\n      // Redirect to payment page\r\n      window.location.href = response.data.authorization_url;\r\n    } catch (error) {\r\n      console.error('Error initializing payment:', error);\r\n      setMessages(prev => [...prev, { \r\n        text: 'Sorry, there was an error processing your payment. Please try again later.', \r\n        sender: 'bot' \r\n      }]);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (inputText.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    // Add user message\r\n    const newMessages = [...messages, { text: inputText, sender: 'user' }];\r\n    setMessages(newMessages);\r\n    setInputText('');\r\n    setIsLoading(true);\r\n    setConnectionError(false);\r\n\r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('http://localhost:3001/api/chat', {\r\n        deviceId: deviceId,\r\n        message: inputText\r\n      });\r\n\r\n      // Add bot response\r\n      setMessages([...newMessages, { text: response.data.response, sender: 'bot' }]);\r\n\r\n      // If this is a checkout response and contains an order ID, initiate payment\r\n      if (inputText.trim() === '99' && response.data.orderId) {\r\n        setCurrentOrderId(response.data.orderId);\r\n        await handlePayment(response.data.orderId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setConnectionError(true);\r\n      \r\n      // Simulate a response for demo purposes\r\n      let simulatedResponse = '';\r\n      \r\n      switch(inputText.trim()) {\r\n        case '1':\r\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\r\n          break;\r\n        case '99':\r\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nThank you for your order!';\r\n          break;\r\n        case '98':\r\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\r\n          break;\r\n        case '97':\r\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\r\n          break;\r\n        case '0':\r\n          simulatedResponse = 'Your order has been cancelled.';\r\n          break;\r\n        case '96':\r\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\r\n          break;\r\n        default:\r\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\r\n      }\r\n      \r\n      // Add simulated response\r\n      setMessages([...newMessages, { \r\n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.', \r\n        sender: 'bot' \r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check for payment verification on component mount\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const reference = urlParams.get('reference');\r\n    const trxref = urlParams.get('trxref');\r\n\r\n    if (reference || trxref) {\r\n      verifyPayment(reference || trxref);\r\n    }\r\n  }, []);\r\n\r\n  const verifyPayment = async (reference) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);\r\n      \r\n      if (response.data.status === 'success') {\r\n        setMessages(prev => [...prev, { \r\n          text: 'Payment successful! Your order has been confirmed. Thank you for your purchase!', \r\n          sender: 'bot' \r\n        }]);\r\n      } else {\r\n        setMessages(prev => [...prev, { \r\n          text: 'Payment verification failed. Please contact support if you believe this is an error.', \r\n          sender: 'bot' \r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying payment:', error);\r\n      setMessages(prev => [...prev, { \r\n        text: 'Error verifying payment. Please contact support if you believe this is an error.', \r\n        sender: 'bot' \r\n      }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\" style={{ \r\n      maxWidth: '600px', \r\n      margin: '0 auto', \r\n      border: '1px solid #ddd', \r\n      borderRadius: '8px',\r\n      overflow: 'hidden'\r\n    }}>\r\n      {connectionError && (\r\n        <div style={{ \r\n          backgroundColor: '#fff3cd', \r\n          color: '#856404', \r\n          padding: '10px', \r\n          textAlign: 'center',\r\n          borderBottom: '1px solid #ddd'\r\n        }}>\r\n          ⚠️ Backend connection failed. Running in demo mode with simulated responses.\r\n        </div>\r\n      )}\r\n      <div className=\"chat-messages\" style={{ \r\n        height: '400px', \r\n        overflowY: 'auto', \r\n        padding: '20px',\r\n        backgroundColor: '#f9f9f9'\r\n      }}>\r\n        {messages.map((message, index) => (\r\n          <div \r\n            key={index} \r\n            style={{ \r\n              marginBottom: '10px',\r\n              textAlign: message.sender === 'user' ? 'right' : 'left'\r\n            }}\r\n          >\r\n            <div style={{ \r\n              display: 'inline-block',\r\n              padding: '10px 15px',\r\n              borderRadius: '18px',\r\n              backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\r\n              color: message.sender === 'user' ? 'white' : 'black',\r\n              maxWidth: '70%',\r\n              whiteSpace: 'pre-line'\r\n            }}>\r\n              {message.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n          <div style={{ textAlign: 'left', marginBottom: '10px' }}>\r\n            <div style={{ \r\n              display: 'inline-block',\r\n              padding: '10px 15px',\r\n              borderRadius: '18px',\r\n              backgroundColor: '#e9ecef',\r\n              color: 'black',\r\n              maxWidth: '70%'\r\n            }}>\r\n              Typing...\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <form onSubmit={handleSendMessage} style={{ \r\n        display: 'flex', \r\n        padding: '10px',\r\n        borderTop: '1px solid #ddd'\r\n      }}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          style={{ \r\n            flex: 1, \r\n            padding: '10px', \r\n            borderRadius: '4px',\r\n            border: '1px solid #ddd',\r\n            marginRight: '10px'\r\n          }}\r\n        />\r\n        <button \r\n          type=\"submit\"\r\n          style={{ \r\n            padding: '10px 20px', \r\n            backgroundColor: '#007bff', \r\n            color: 'white', \r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}