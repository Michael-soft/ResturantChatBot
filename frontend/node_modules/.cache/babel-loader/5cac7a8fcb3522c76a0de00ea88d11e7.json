{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tosin\\\\OneDrive\\\\Desktop\\\\Third Semster Assesment\\\\Restaurant ChatBot\\\\frontend\\\\src\\\\components\\\\ChatBot.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PaystackPop from '@paystack/inline-js';\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n  const [currentOrderAmount, setCurrentOrderAmount] = useState(0);\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n\n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n  const fetchInitialOptions = async id => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      setMessages([{\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([{\n        text: 'Welcome to Our Restaurant Chatbot! Please select an option:',\n        sender: 'bot'\n      }, {\n        text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)',\n        sender: 'bot'\n      }, {\n        text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePayment = async (orderId, amount) => {\n    try {\n      // Initialize payment\n      const response = await axios.post('http://localhost:3001/api/payment/initialize', {\n        orderId,\n        amount: amount * 100,\n        // Convert to kobo\n        email: 'customer@example.com' // You might want to collect this from the user\n      }, {\n        headers: {\n          deviceId\n        }\n      });\n      if (response.data.authorization_url) {\n        // Open Paystack popup\n        const handler = new PaystackPop();\n        handler.newTransaction({\n          key: process.env.REACT_APP_PAYSTACK_PUBLIC_KEY,\n          email: 'customer@example.com',\n          amount: amount * 100,\n          ref: orderId,\n          callback: response => {\n            // Handle successful payment\n            verifyPayment(response.reference);\n          },\n          onClose: () => {\n            setMessages(prev => [...prev, {\n              text: 'Payment window closed. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment',\n              sender: 'bot'\n            }]);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing payment:', error);\n      setMessages(prev => [...prev, {\n        text: 'Sorry, there was an error processing your payment. Please try again later.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (inputText.trim() === '') {\n      return;\n    }\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: inputText,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      // Send message to backend\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      // Add bot response\n      setMessages([...newMessages, {\n        text: response.data.response,\n        sender: 'bot'\n      }]);\n\n      // Check if this is a payment selection (after checkout)\n      if (inputText.trim() === '1' && response.data.response.includes('Pay with Paystack')) {\n        // Extract order ID and amount from the response\n        const orderIdMatch = response.data.response.match(/Order #(\\d+)/);\n        const amountMatch = response.data.response.match(/Total: \\$(\\d+(\\.\\d{2})?)/);\n        if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n          const orderId = orderIdMatch[1];\n          const amount = parseFloat(amountMatch[1]);\n          setCurrentOrderId(orderId);\n          setCurrentOrderAmount(amount);\n          await handlePayment(orderId, amount);\n        } else {\n          setMessages(prev => [...prev, {\n            text: 'Sorry, there was an error processing your payment. Please try again.',\n            sender: 'bot'\n          }]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n\n      // Simulate a response for demo purposes\n      let simulatedResponse = '';\n      switch (inputText.trim()) {\n        case '1':\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\n          break;\n        case '99':\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\n          break;\n        default:\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n      }\n\n      // Add simulated response\n      setMessages([...newMessages, {\n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.',\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check for payment verification on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const reference = urlParams.get('reference');\n    const trxref = urlParams.get('trxref');\n    if (reference || trxref) {\n      verifyPayment(reference || trxref);\n    }\n  }, []);\n  const verifyPayment = async reference => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);\n      if (response.data.status === 'success') {\n        setMessages(prev => [...prev, {\n          text: 'Payment successful! Your order has been confirmed. Thank you for your purchase!',\n          sender: 'bot'\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          text: 'Payment verification failed. Please contact support if you believe this is an error.',\n          sender: 'bot'\n        }]);\n      }\n    } catch (error) {\n      console.error('Error verifying payment:', error);\n      setMessages(prev => [...prev, {\n        text: 'Error verifying payment. Please contact support if you believe this is an error.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-container\",\n    style: {\n      maxWidth: '600px',\n      margin: '0 auto',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      overflow: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, connectionError && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: '#fff3cd',\n      color: '#856404',\n      padding: '10px',\n      textAlign: 'center',\n      borderBottom: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }, \"\\u26A0\\uFE0F Backend connection failed. Running in demo mode with simulated responses.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    style: {\n      height: '400px',\n      overflowY: 'auto',\n      padding: '20px',\n      backgroundColor: '#f9f9f9'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    style: {\n      marginBottom: '10px',\n      textAlign: message.sender === 'user' ? 'right' : 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      padding: '10px 15px',\n      borderRadius: '18px',\n      backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n      color: message.sender === 'user' ? 'white' : 'black',\n      maxWidth: '70%',\n      whiteSpace: 'pre-line'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, message.text))), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'left',\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      padding: '10px 15px',\n      borderRadius: '18px',\n      backgroundColor: '#e9ecef',\n      color: 'black',\n      maxWidth: '70%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, \"Typing...\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSendMessage,\n    style: {\n      display: 'flex',\n      padding: '10px',\n      borderTop: '1px solid #ddd'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: inputText,\n    onChange: e => setInputText(e.target.value),\n    placeholder: \"Type your message...\",\n    style: {\n      flex: 1,\n      padding: '10px',\n      borderRadius: '4px',\n      border: '1px solid #ddd',\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    style: {\n      padding: '10px 20px',\n      backgroundColor: '#007bff',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n}\nexport default ChatBot;","map":{"version":3,"names":["React","useState","useEffect","axios","PaystackPop","ChatBot","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","deviceId","setDeviceId","connectionError","setConnectionError","currentOrderId","setCurrentOrderId","currentOrderAmount","setCurrentOrderAmount","newDeviceId","Math","random","toString","substring","fetchInitialOptions","id","response","post","message","text","data","sender","error","console","handlePayment","orderId","amount","email","headers","authorization_url","handler","newTransaction","key","process","env","REACT_APP_PAYSTACK_PUBLIC_KEY","ref","callback","verifyPayment","reference","onClose","prev","handleSendMessage","e","preventDefault","trim","newMessages","includes","orderIdMatch","match","amountMatch","parseFloat","simulatedResponse","urlParams","URLSearchParams","window","location","search","get","trxref","status","createElement","className","style","maxWidth","margin","border","borderRadius","overflow","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","color","padding","textAlign","borderBottom","height","overflowY","map","index","marginBottom","display","whiteSpace","onSubmit","borderTop","type","value","onChange","target","placeholder","flex","marginRight","cursor"],"sources":["C:/Users/tosin/OneDrive/Desktop/Third Semster Assesment/Restaurant ChatBot/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PaystackPop from '@paystack/inline-js';\n\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [deviceId, setDeviceId] = useState('');\n  const [connectionError, setConnectionError] = useState(false);\n  const [currentOrderId, setCurrentOrderId] = useState(null);\n  const [currentOrderAmount, setCurrentOrderAmount] = useState(0);\n\n  // Generate a random device ID when component mounts\n  useEffect(() => {\n    const newDeviceId = 'device_' + Math.random().toString(36).substring(2, 15);\n    setDeviceId(newDeviceId);\n    \n    // Get initial options from the backend\n    fetchInitialOptions(newDeviceId);\n  }, []);\n\n  const fetchInitialOptions = async (id) => {\n    setIsLoading(true);\n    setConnectionError(false);\n    try {\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: id,\n        message: 'start'\n      });\n      \n      setMessages([\n        { text: response.data.response, sender: 'bot' }\n      ]);\n    } catch (error) {\n      console.error('Error fetching options:', error);\n      setConnectionError(true);\n      setMessages([\n        { text: 'Welcome to Our Restaurant Chatbot! Please select an option:', sender: 'bot' },\n        { text: '1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)', sender: 'bot' },\n        { text: '⚠️ Note: Backend connection failed. This is a demo mode with simulated responses.', sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePayment = async (orderId, amount) => {\n    try {\n      // Initialize payment\n      const response = await axios.post('http://localhost:3001/api/payment/initialize', \n        { \n          orderId,\n          amount: amount * 100, // Convert to kobo\n          email: 'customer@example.com' // You might want to collect this from the user\n        },\n        { headers: { deviceId } }\n      );\n\n      if (response.data.authorization_url) {\n        // Open Paystack popup\n        const handler = new PaystackPop();\n        handler.newTransaction({\n          key: process.env.REACT_APP_PAYSTACK_PUBLIC_KEY,\n          email: 'customer@example.com',\n          amount: amount * 100,\n          ref: orderId,\n          callback: (response) => {\n            // Handle successful payment\n            verifyPayment(response.reference);\n          },\n          onClose: () => {\n            setMessages(prev => [...prev, { \n              text: 'Payment window closed. Would you like to try again?\\n\\n1 - Try payment again\\n0 - Cancel payment', \n              sender: 'bot' \n            }]);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing payment:', error);\n      setMessages(prev => [...prev, { \n        text: 'Sorry, there was an error processing your payment. Please try again later.', \n        sender: 'bot' \n      }]);\n    }\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (inputText.trim() === '') {\n      return;\n    }\n\n    // Add user message\n    const newMessages = [...messages, { text: inputText, sender: 'user' }];\n    setMessages(newMessages);\n    setInputText('');\n    setIsLoading(true);\n    setConnectionError(false);\n\n    try {\n      // Send message to backend\n      const response = await axios.post('http://localhost:3001/api/chat', {\n        deviceId: deviceId,\n        message: inputText\n      });\n\n      // Add bot response\n      setMessages([...newMessages, { text: response.data.response, sender: 'bot' }]);\n\n      // Check if this is a payment selection (after checkout)\n      if (inputText.trim() === '1' && response.data.response.includes('Pay with Paystack')) {\n        // Extract order ID and amount from the response\n        const orderIdMatch = response.data.response.match(/Order #(\\d+)/);\n        const amountMatch = response.data.response.match(/Total: \\$(\\d+(\\.\\d{2})?)/);\n        \n        if (orderIdMatch && orderIdMatch[1] && amountMatch && amountMatch[1]) {\n          const orderId = orderIdMatch[1];\n          const amount = parseFloat(amountMatch[1]);\n          setCurrentOrderId(orderId);\n          setCurrentOrderAmount(amount);\n          await handlePayment(orderId, amount);\n        } else {\n          setMessages(prev => [...prev, { \n            text: 'Sorry, there was an error processing your payment. Please try again.', \n            sender: 'bot' \n          }]);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setConnectionError(true);\n      \n      // Simulate a response for demo purposes\n      let simulatedResponse = '';\n      \n      switch(inputText.trim()) {\n        case '1':\n          simulatedResponse = 'Great! What would you like to order?\\n\\nAvailable items:\\n1. Pizza - $10\\n2. Burger - $8\\n3. Salad - $6\\n4. Pasta - $9\\n\\nPlease enter the number of the item you want to order.';\n          break;\n        case '99':\n          simulatedResponse = 'Your order has been checked out. Total: $0.00\\n\\nWould you like to pay now?\\n\\n1 - Pay with Paystack\\n0 - Cancel payment';\n          break;\n        case '98':\n          simulatedResponse = 'Your order history:\\n\\nNo previous orders found.';\n          break;\n        case '97':\n          simulatedResponse = 'Your current order:\\n\\nNo active order.';\n          break;\n        case '0':\n          simulatedResponse = 'Your order has been cancelled.';\n          break;\n        case '96':\n          simulatedResponse = 'Please enter the date and time you would like to schedule your order for (e.g., \"2023-12-25 18:00\").';\n          break;\n        default:\n          simulatedResponse = 'I didn\\'t understand that. Please select a valid option:\\n\\n1 - Place an Order (or add items if order is active)\\n99 - Checkout Order\\n98 - See Order History\\n97 - See Current Order\\n0 - Cancel Order\\n96 - Schedule Order (optional)';\n      }\n      \n      // Add simulated response\n      setMessages([...newMessages, { \n        text: simulatedResponse + '\\n\\n⚠️ Note: Backend connection failed. This is a simulated response.', \n        sender: 'bot' \n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check for payment verification on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const reference = urlParams.get('reference');\n    const trxref = urlParams.get('trxref');\n\n    if (reference || trxref) {\n      verifyPayment(reference || trxref);\n    }\n  }, []);\n\n  const verifyPayment = async (reference) => {\n    try {\n      const response = await axios.get(`http://localhost:3001/api/payment/verify?reference=${reference}`);\n      \n      if (response.data.status === 'success') {\n        setMessages(prev => [...prev, { \n          text: 'Payment successful! Your order has been confirmed. Thank you for your purchase!', \n          sender: 'bot' \n        }]);\n      } else {\n        setMessages(prev => [...prev, { \n          text: 'Payment verification failed. Please contact support if you believe this is an error.', \n          sender: 'bot' \n        }]);\n      }\n    } catch (error) {\n      console.error('Error verifying payment:', error);\n      setMessages(prev => [...prev, { \n        text: 'Error verifying payment. Please contact support if you believe this is an error.', \n        sender: 'bot' \n      }]);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\" style={{ \n      maxWidth: '600px', \n      margin: '0 auto', \n      border: '1px solid #ddd', \n      borderRadius: '8px',\n      overflow: 'hidden'\n    }}>\n      {connectionError && (\n        <div style={{ \n          backgroundColor: '#fff3cd', \n          color: '#856404', \n          padding: '10px', \n          textAlign: 'center',\n          borderBottom: '1px solid #ddd'\n        }}>\n          ⚠️ Backend connection failed. Running in demo mode with simulated responses.\n        </div>\n      )}\n      <div className=\"chat-messages\" style={{ \n        height: '400px', \n        overflowY: 'auto', \n        padding: '20px',\n        backgroundColor: '#f9f9f9'\n      }}>\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            style={{ \n              marginBottom: '10px',\n              textAlign: message.sender === 'user' ? 'right' : 'left'\n            }}\n          >\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: message.sender === 'user' ? '#007bff' : '#e9ecef',\n              color: message.sender === 'user' ? 'white' : 'black',\n              maxWidth: '70%',\n              whiteSpace: 'pre-line'\n            }}>\n              {message.text}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div style={{ textAlign: 'left', marginBottom: '10px' }}>\n            <div style={{ \n              display: 'inline-block',\n              padding: '10px 15px',\n              borderRadius: '18px',\n              backgroundColor: '#e9ecef',\n              color: 'black',\n              maxWidth: '70%'\n            }}>\n              Typing...\n            </div>\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSendMessage} style={{ \n        display: 'flex', \n        padding: '10px',\n        borderTop: '1px solid #ddd'\n      }}>\n        <input\n          type=\"text\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          placeholder=\"Type your message...\"\n          style={{ \n            flex: 1, \n            padding: '10px', \n            borderRadius: '4px',\n            border: '1px solid #ddd',\n            marginRight: '10px'\n          }}\n        />\n        <button \n          type=\"submit\"\n          style={{ \n            padding: '10px 20px', \n            backgroundColor: '#007bff', \n            color: 'white', \n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}